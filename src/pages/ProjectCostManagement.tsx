import { useState, useEffect } from "react"
import { useLocation } from "react-router-dom"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { DollarSign, Users, ShoppingCart, Plus, Share2, Building, Calendar, Target } from "lucide-react"
import { CostManagementShareModal } from "@/components/CostManagementShareModal"
import { canAccessCostManagement } from "@/services/costManagementService"
import { useAuth } from "@/hooks/useAuth"
import { supabase } from "@/integrations/supabase/client"
import type { Database } from "@/integrations/supabase/types"

type Project = Database['public']['Tables']['projects']['Row']

export default function ProjectCostManagement() {
  const { user } = useAuth()
  const location = useLocation()
  const [activeProject, setActiveProject] = useState<Project | null>(null)
  const [activeTab, setActiveTab] = useState<string>("profit-loss")
  const [isShareModalOpen, setIsShareModalOpen] = useState(false)
  const [hasAccess, setHasAccess] = useState(false)
  const [isCheckingAccess, setIsCheckingAccess] = useState(true)
  const [isLoadingProject, setIsLoadingProject] = useState(true)

  // ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
  useEffect(() => {
    const loadActiveProject = async () => {
      if (!user) return
      
      try {
        setIsLoadingProject(true)
        
        // localStorageÏóêÏÑú ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏ Í∞ÄÏ†∏Ïò§Í∏∞
        const savedOpenProject = localStorage.getItem('openProject')
        if (savedOpenProject) {
          const project = JSON.parse(savedOpenProject)
          setActiveProject(project)
        } else {
          // ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏúºÎ©¥ Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
          const { data, error } = await supabase
            .from('projects')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(1)

          if (error) {
            console.error('ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ïã§Ìå®:', error)
            return
          }

          if (data && data.length > 0) {
            setActiveProject(data[0])
          }
        }
      } catch (error) {
        console.error('ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ï§ë Ïò§Î•ò:', error)
      } finally {
        setIsLoadingProject(false)
      }
    }

    loadActiveProject()
  }, [user])

  // ÌéòÏù¥ÏßÄ Ïù¥Îèô Í∞êÏßÄ - F5ÏôÄ ÎèôÏùºÌïú Ï≤òÎ¶¨
  useEffect(() => {
    console.log('üîÑ ÎπÑÏö© Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ Ïù¥Îèô Í∞êÏßÄ:', location.pathname)
    const loadActiveProject = async () => {
      if (!user) return
      
      try {
        setIsLoadingProject(true)
        
        // localStorageÏóêÏÑú ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏ Í∞ÄÏ†∏Ïò§Í∏∞
        const savedOpenProject = localStorage.getItem('openProject')
        if (savedOpenProject) {
          const project = JSON.parse(savedOpenProject)
          setActiveProject(project)
        } else {
          // ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏúºÎ©¥ Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú
          const { data, error } = await supabase
            .from('projects')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(1)

          if (error) {
            console.error('ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ïã§Ìå®:', error)
            return
          }

          if (data && data.length > 0) {
            setActiveProject(data[0])
          }
        }
      } catch (error) {
        console.error('ÌéòÏù¥ÏßÄ Ïù¥Îèô Ïãú ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú Ï§ë Ïò§Î•ò:', error)
      } finally {
        setIsLoadingProject(false)
      }
    }

    loadActiveProject()
  }, [location.pathname, user])

  // Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏ (Îã®ÏàúÌôîÎêú Î≤ÑÏ†Ñ)
  useEffect(() => {
    const checkAccess = async () => {
      if (!user || !activeProject) {
        console.log('ÏÇ¨Ïö©Ïûê ÎòêÎäî ÌôúÏÑ± ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏùå:', { user: !!user, activeProject: !!activeProject })
        setIsCheckingAccess(false)
        return
      }
      
      try {
        console.log('ÎπÑÏö© Í¥ÄÎ¶¨ Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏ ÏãúÏûë:', { projectId: activeProject.id, userId: user.id })
        setIsCheckingAccess(true)
        
        // ÏûÑÏãú Ìï¥Í≤∞Ï±Ö: ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÏûêÎßå Ï†ëÍ∑º ÌóàÏö© (Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨ ÏóÜÏù¥)
        // localStorageÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏó¨ ÏÉùÏÑ±Ïûê Ïó¨Î∂Ä ÌåêÎã®
        const savedOpenProject = localStorage.getItem('openProject')
        if (savedOpenProject) {
          const project = JSON.parse(savedOpenProject)
          if (project.created_by === user.id) {
            console.log('‚úÖ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÏûêÎ°ú Ï†ëÍ∑º ÌóàÏö© (localStorage ÌôïÏù∏)')
            setHasAccess(true)
          } else {
            console.log('‚ùå ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÏûêÍ∞Ä ÏïÑÎãò - Ï†ëÍ∑º Í±∞Î∂Ä')
            setHasAccess(false)
          }
        } else {
          console.log('‚ùå ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ ÏóÜÏùå - Ï†ëÍ∑º Í±∞Î∂Ä')
          setHasAccess(false)
        }
      } catch (error) {
        console.error('Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏ Ïã§Ìå®:', error)
        setHasAccess(false)
      } finally {
        console.log('Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏ ÏôÑÎ£å')
        setIsCheckingAccess(false)
      }
    }

    checkAccess()
  }, [user, activeProject])



  // Îì±Í∏âÎ≥Ñ MM ÎπÑÏö©
  const gradeCosts = {
    special: 17879000,
    high: 13938000,
    intermediate: 10467000,
    entry: 7783000
  }

  // Ïù∏Í±¥ÎπÑ Îç∞Ïù¥ÌÑ∞ (Ïù¥ÎØ∏ÏßÄ Í∏∞Î∞ò)
  const personnelExpenses = [
    {
      name: "ÍπÄÏùòÌòÑ",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [1768864, 7783000, 7783000, 7783000, 7783000, 7783000, 7783000, 7783000],
      remarks: ""
    },
    {
      name: "Ìô©ÏÑ§",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 5306591, 2476409, 0, 0, 0, 0, 0],
      remarks: ""
    },
    {
      name: "Ï†ïÍ±¥Î™®",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 7075455, 6014136, 7783000, 1768864, 0, 0, 0],
      remarks: ""
    },
    {
      name: "Ïù¥ÏàòÏ∞¨",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 7783000, 3891500, 0, 0, 0, 0, 0],
      remarks: ""
    },
    {
      name: "Ïû•ÎèôÍ∂å",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 0, 4245273, 1415091, 0, 0, 0, 0],
      remarks: ""
    },
    {
      name: "ÏµúÏäπÏò•",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 0, 1415091, 2830182, 3891500, 0, 0, 0],
      remarks: ""
    },
    {
      name: "Ï†ÑÌòÑÎ∞∞",
      grade: "Ï¥àÍ∏â",
      monthlyCosts: [0, 0, 1415091, 2830182, 3891500, 0, 0, 0],
      remarks: ""
    }
  ]

  // ÏõîÎ≥Ñ Ï¥ù Ïù∏Í±¥ÎπÑ Í≥ÑÏÇ∞
  const totalPersonnelCosts = personnelExpenses[0].monthlyCosts.map((_, monthIndex) => 
    personnelExpenses.reduce((sum, person) => sum + person.monthlyCosts[monthIndex], 0)
  )

  // 4ÎåÄÎ≥¥Ìóò ÎπÑÏö© (Ï¥ù Ïù∏Í±¥ÎπÑÏùò 10.5%)
  const insuranceCosts = totalPersonnelCosts.map(total => Math.round(total * 0.105))

  // Í∞ÑÏ†ëÎπÑ Îç∞Ïù¥ÌÑ∞
  const indirectCosts = [
    {
      category: "ÏßÄÍ∏âÏàòÏàòÎ£å",
      monthlyValues: ["ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•"]
    },
    {
      category: "ÏßÄÍ∏âÏûÑÏ∞®Î£å",
      monthlyValues: ["ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•"]
    },
    {
      category: "ÏàòÎèÑÍ¥ëÏó¥ÎπÑ",
      monthlyValues: ["ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•"]
    },
    {
      category: "Í∞êÍ∞ÄÏÉÅÍ∞Å",
      monthlyValues: ["ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•", "ÏûÖÎ†•"]
    },
    {
      category: "Í≥µÌÜµÎπÑÍ≥Ñ",
      monthlyValues: ["-", "-", "-", "-", "-", "-", "-", "-"]
    }
  ]

  // MM Îç∞Ïù¥ÌÑ∞ (Ïù¥ÎØ∏ÏßÄ Í∏∞Î∞ò)
  const personnelMMData = [
    {
      name: "ÍπÄÏùòÌòÑ",
      grade: "Ï¥àÍ∏â",
      role: "PM",
      task: "ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0.23, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
      totalMM: 7.23
    },
    {
      name: "Ìô©ÏÑ§",
      grade: "Ï¥àÍ∏â",
      role: "TL",
      task: "ÏßÄÌëú Í≥ÑÏÇ∞ Î™®Îìà",
      residency: "ÎπÑÏÉÅÏ£º",
      monthlyMM: [0, 0.68, 0.32, 0, 0, 0, 0, 0],
      totalMM: 1.00
    },
    {
      name: "Ï†ïÍ±¥Î™®",
      grade: "Ï¥àÍ∏â",
      role: "D",
      task: "ÏßÄÌëú Í≥ÑÏÇ∞ Î™®Îìà",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0, 0.91, 0.77, 1.00, 0.23, 0, 0, 0],
      totalMM: 2.91
    },
    {
      name: "Ïù¥ÏàòÏ∞¨",
      grade: "Ï¥àÍ∏â",
      role: "TL",
      task: "ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïñ¥ÎåëÌÑ∞",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0, 1.00, 0.50, 0, 0, 0, 0, 0],
      totalMM: 1.50
    },
    {
      name: "Ïû•ÎèôÍ∂å",
      grade: "Ï¥àÍ∏â",
      role: "D",
      task: "ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïñ¥ÎåëÌÑ∞",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0, 0, 0.55, 0.18, 0, 0, 0, 0],
      totalMM: 0.73
    },
    {
      name: "ÏµúÏäπÏò•",
      grade: "Ï¥àÍ∏â",
      role: "D",
      task: "ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïñ¥ÎåëÌÑ∞",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0, 0, 0.18, 0.36, 0.50, 0, 0, 0],
      totalMM: 1.05
    },
    {
      name: "Ï†ÑÌòÑÎ∞∞",
      grade: "Ï¥àÍ∏â",
      role: "D",
      task: "ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïñ¥ÎåëÌÑ∞",
      residency: "ÏÉÅÏ£º",
      monthlyMM: [0, 0, 0.18, 0.36, 0.50, 0, 0, 0],
      totalMM: 1.05
    }
  ]

  // ÏõîÎ≥Ñ Ï¥ù MM Í≥ÑÏÇ∞
  const totalMonthlyMM = personnelMMData[0].monthlyMM.map((_, monthIndex) => 
    personnelMMData.reduce((sum, person) => sum + person.monthlyMM[monthIndex], 0)
  )

  // Í∞Å Í∞úÏù∏Ïùò Ï¥ù Ïù∏Í±¥ÎπÑ Í≥ÑÏÇ∞
  const personnelTotalCosts = personnelExpenses.map(person => 
    person.monthlyCosts.reduce((sum, cost) => sum + cost, 0)
  )

  // ÏöîÏïΩ Ï†ïÎ≥¥
  const totalSalarySum = totalPersonnelCosts.reduce((sum, cost) => sum + cost, 0)
  const totalMMSum = personnelMMData.reduce((sum, person) => sum + person.totalMM, 0)
  const averageCostPerMonth = 7783000

  const procurementItems = [
    { item: "ÏÑúÎ≤Ñ Ïù∏ÌîÑÎùº", quantity: 1, unitPrice: 5000000, total: 5000000, status: "Í≥ÑÏïΩÏôÑÎ£å" },
    { item: "Í∞úÎ∞ú ÎèÑÍµ¨ ÎùºÏù¥ÏÑ†Ïä§", quantity: 5, unitPrice: 200000, total: 1000000, status: "Í≥ÑÏïΩÏôÑÎ£å" },
    { item: "ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω Íµ¨Ï∂ï", quantity: 1, unitPrice: 3000000, total: 3000000, status: "ÏßÑÌñâÏ§ë" },
    { item: "Î≥¥Ïïà ÏÜîÎ£®ÏÖò", quantity: 1, unitPrice: 2000000, total: 2000000, status: "Í≥ÑÌöçÏ§ë" }
  ]

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Í≥ÑÏïΩÏôÑÎ£å": return "bg-green-100 text-green-800"
      case "ÏßÑÌñâÏ§ë": return "bg-blue-100 text-blue-800"
      case "Í≥ÑÌöçÏ§ë": return "bg-yellow-100 text-yellow-800"
      default: return "bg-gray-100 text-gray-800"
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount)
  }

  // ÌîÑÎ°úÏ†ùÌä∏ Î°úÎî© Ï§ë
  if (isLoadingProject) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">ÌîÑÎ°úÏ†ùÌä∏Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          </div>
        </div>
      </div>
    )
  }

  // ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
  if (!activeProject) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <DollarSign className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2">ÌôúÏÑ±ÌôîÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§</h2>
            <p className="text-muted-foreground">
              ÎπÑÏö© Í¥ÄÎ¶¨Î•º ÏúÑÌï¥ ÌîÑÎ°úÏ†ùÌä∏Î•º Î®ºÏ†Ä Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî.
            </p>
          </div>
        </div>
      </div>
    )
  }

  // Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏ Ï§ë
  if (isCheckingAccess) {
    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground mb-2">Ï†ëÍ∑º Í∂åÌïúÏùÑ ÌôïÏù∏ÌïòÎäî Ï§ë...</p>
            <p className="text-xs text-gray-500">
              ÌîÑÎ°úÏ†ùÌä∏: {activeProject?.name || 'Î°úÎî© Ï§ë...'}
            </p>
            <p className="text-xs text-gray-500">
              ÏÇ¨Ïö©Ïûê: {user?.id ? 'Ïù∏Ï¶ùÎê®' : 'Ïù∏Ï¶ù ÎåÄÍ∏∞ Ï§ë...'}
            </p>
          </div>
        </div>
      </div>
    )
  }

  if (!hasAccess) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <DollarSign className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2">Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§</h2>
            <p className="text-muted-foreground mb-4">
              Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Ïùò ÎπÑÏö© Í¥ÄÎ¶¨Ïóê Ï†ëÍ∑ºÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.
            </p>
            <p className="text-sm text-muted-foreground">
              ÌîÑÎ°úÏ†ùÌä∏ ÏÜåÏú†ÏûêÏóêÍ≤å Ï†ëÍ∑º Í∂åÌïúÏùÑ ÏöîÏ≤≠ÌïòÏÑ∏Ïöî.
            </p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      {/* Ìó§Îçî */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <DollarSign className="w-8 h-8 text-primary" />
          <div>
            <h1 className="text-3xl font-bold">ÌîÑÎ°úÏ†ùÌä∏ ÎπÑÏö© Í¥ÄÎ¶¨</h1>
            <p className="text-muted-foreground">ÌîÑÎ°úÏ†ùÌä∏ ÎπÑÏö©ÏùÑ Í≥ÑÌöçÌïòÍ≥† ÏàòÏùµÏÑ±ÏùÑ Í≥ÑÏÇ∞Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
          </div>
        </div>
        <Button onClick={() => setIsShareModalOpen(true)}>
          <Share2 className="w-4 h-4 mr-2" />
          Í≥µÏú† ÏÑ§Ï†ï
        </Button>
      </div>



      {/* ÌÉ≠ Î©îÎâ¥ */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="profit-loss">ÏÜêÏùµÍ≥ÑÏÇ∞ÏÑú</TabsTrigger>
          <TabsTrigger value="effort-allocation">ÌåêÍ¥ÄÎπÑ</TabsTrigger>
          <TabsTrigger value="procurement">Ï°∞Îã¨</TabsTrigger>
        </TabsList>

        {/* ÏÜêÏùµÍ≥ÑÏÇ∞ÏÑú ÌÉ≠ */}
        <TabsContent value="profit-loss" className="space-y-6">
          {/* ÏöîÏïΩ Ï†ïÎ≥¥ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                    {formatCurrency(50000000)}
                  </div>
                  <div className="text-sm text-muted-foreground">Ï¥ù ÏàòÏùµ</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                <div className="text-2xl font-bold text-red-600">
                    {formatCurrency(40000000)}
                  </div>
                  <div className="text-sm text-muted-foreground">Ï¥ù ÎπÑÏö©</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                    {formatCurrency(10000000)}
                  </div>
                  <div className="text-sm text-muted-foreground">ÏàúÏàòÏùµ</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    20%
                  </div>
                  <div className="text-sm text-muted-foreground">ÏàòÏùµÎ•†</div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* ÏÉÅÏÑ∏ ÎπÑÏö© Î∂ÑÏÑù */}
          <Card>
            <CardHeader>
              <CardTitle>ÎπÑÏö© ÏÉÅÏÑ∏ Î∂ÑÏÑù</CardTitle>
              <CardDescription>Í∞Å ÎπÑÏö© Ìï≠Î™©Î≥Ñ ÏÉÅÏÑ∏ ÎÇ¥Ïó≠ÏûÖÎãàÎã§.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">Ïù∏Í±¥ÎπÑ</span>
                  <span className="text-red-600 font-semibold">
                    {formatCurrency(25000000)}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">ÏûêÏû¨ÎπÑ</span>
                  <span className="text-red-600 font-semibold">
                    {formatCurrency(8000000)}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">Í∞ÑÏ†ëÎπÑ</span>
                  <span className="text-red-600 font-semibold">
                    {formatCurrency(5000000)}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="font-medium">Í∏∞ÌÉÄ ÎπÑÏö©</span>
                  <span className="text-red-600 font-semibold">
                    {formatCurrency(2000000)}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* ÌåêÍ¥ÄÎπÑ ÌÉ≠ */}
        <TabsContent value="effort-allocation" className="space-y-6">
          {/* ÏöîÏïΩ Ï†ïÎ≥¥ */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {formatCurrency(totalSalarySum)}
                  </div>
                  <div className="text-sm text-muted-foreground">Ï¥ù Í∏âÏó¨ Ìï©</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {totalMMSum} MM
                  </div>
                  <div className="text-sm text-muted-foreground">Ï¥ù MM Ìï©</div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {formatCurrency(averageCostPerMonth)}
                  </div>
                  <div className="text-sm text-muted-foreground">ÌèâÍ∑† ÏõêÍ∞Ä/Ïõî</div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Îì±Í∏âÎ≥Ñ MM ÎπÑÏö© */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Building className="w-5 h-5" />
                Îì±Í∏âÎ≥Ñ MM ÎπÑÏö©
              </CardTitle>
              <CardDescription>ÏßÅÍ∏âÎ≥Ñ ÏõîÍ∞Ñ ÎπÑÏö© Í∏∞Ï§ÄÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="p-4 border rounded-lg text-center">
                  <div className="text-sm text-gray-600 mb-1">ÌäπÍ∏â</div>
                  <div className="text-lg font-semibold text-blue-600">{formatCurrency(17879000)}</div>
                </div>
                <div className="p-4 border rounded-lg text-center">
                  <div className="text-sm text-gray-600 mb-1">Í≥†Í∏â</div>
                  <div className="text-lg font-semibold text-green-600">{formatCurrency(13938000)}</div>
                </div>
                <div className="p-4 border rounded-lg text-center">
                  <div className="text-sm text-gray-600 mb-1">Ï§ëÍ∏â</div>
                  <div className="text-lg font-semibold text-yellow-600">{formatCurrency(10467000)}</div>
                </div>
                <div className="p-4 border rounded-lg text-center">
                  <div className="text-sm text-gray-600 mb-1">Ï¥àÍ∏â</div>
                  <div className="text-lg font-semibold text-orange-600">{formatCurrency(7783000)}</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Ïù∏Í±¥ÎπÑ Í¥ÄÎ¶¨ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="w-5 h-5" />
                Ïù∏Í±¥ÎπÑ Í¥ÄÎ¶¨
              </CardTitle>
              <CardDescription>Í∞úÏù∏Î≥Ñ ÏûëÏóÖ Í≥µÏàò(MM)ÏôÄ Ïù∏Í±¥ÎπÑÎ•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§.</CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="mm" className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="mm">ÏûëÏóÖ Í≥µÏàò (MM)</TabsTrigger>
                  <TabsTrigger value="cost">Ïù∏Í±¥ÎπÑ</TabsTrigger>
                </TabsList>
                
                {/* Í≥µÌÜµ ÌÖåÏù¥Î∏î */}
                <div className="overflow-x-auto">
                  <table className="w-full text-sm table-fixed">
                    <thead>
                      <tr className="border-b bg-gray-50">
                        <th className="text-left p-3 font-semibold w-20">Ïù¥Î¶Ñ</th>
                        <th className="text-center p-3 font-semibold w-16">Îì±Í∏â</th>
                        <th className="text-center p-3 font-semibold w-24">Í≥Ñ</th>
                        <th className="text-center p-3 font-semibold w-20">8Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">9Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">10Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">11Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">12Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">1Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">2Ïõî</th>
                        <th className="text-center p-3 font-semibold w-20">3Ïõî</th>
                        <th className="text-center p-3 font-semibold w-32">ÎπÑÍ≥†</th>
                      </tr>
                    </thead>
                    <tbody>
                      {/* ÏûëÏóÖ Í≥µÏàò (MM) ÌÉ≠ ÎÇ¥Ïö© */}
                      <TabsContent value="mm" className="contents">
                        {personnelMMData.map((person, index) => (
                          <tr key={index} className="border-b hover:bg-gray-50">
                            <td className="p-3 font-medium w-20">{person.name}</td>
                            <td className="p-3 text-center w-16">
                              <Badge variant="outline" className="text-xs">
                                {person.grade}
                              </Badge>
                            </td>
                            <td className="p-3 text-center font-semibold w-24">
                              {person.totalMM.toFixed(2)}
                            </td>
                            {person.monthlyMM.map((mm, monthIndex) => (
                              <td key={monthIndex} className="p-3 text-center w-20">
                                {mm > 0 ? mm.toFixed(2) : '-'}
                              </td>
                            ))}
                            <td className="p-3 text-center text-xs text-gray-500 w-32">
                            </td>
                          </tr>
                        ))}
                        <tr className="border-b bg-green-50 font-semibold">
                          <td className="p-3 w-20">Ï¥ù MM</td>
                          <td className="p-3 text-center w-16">-</td>
                          <td className="p-3 text-center text-green-700 w-24">
                            {totalMMSum.toFixed(2)}
                          </td>
                          {totalMonthlyMM.map((total, index) => (
                            <td key={index} className="p-3 text-center text-green-700 w-20">
                              {total > 0 ? total.toFixed(2) : '-'}
                            </td>
                          ))}
                          <td className="p-3 text-center text-xs text-gray-500 w-32">
                          </td>
                        </tr>
                      </TabsContent>
                      
                      {/* Ïù∏Í±¥ÎπÑ ÌÉ≠ ÎÇ¥Ïö© */}
                      <TabsContent value="cost" className="contents">
                        {personnelExpenses.map((person, index) => (
                          <tr key={index} className="border-b hover:bg-gray-50">
                            <td className="p-3 font-medium w-20">{person.name}</td>
                            <td className="p-3 text-center w-16">
                              <Badge variant="outline" className="text-xs">
                                {person.grade}
                              </Badge>
                            </td>
                            <td className="p-3 text-center font-semibold w-24">
                              {formatCurrency(personnelTotalCosts[index])}
                            </td>
                            {person.monthlyCosts.map((cost, monthIndex) => (
                              <td key={monthIndex} className="p-3 text-center w-20">
                                {cost > 0 ? formatCurrency(cost) : '-'}
                              </td>
                            ))}
                            <td className="p-3 text-center text-xs text-gray-500 w-32">
                              {person.remarks}
                            </td>
                          </tr>
                        ))}
                        <tr className="border-b bg-green-50 font-semibold">
                          <td className="p-3 w-20">Ï¥ù Ïù∏Í±¥ÎπÑ</td>
                          <td className="p-3 text-center w-16">-</td>
                          <td className="p-3 text-center text-green-700 w-24">
                            {formatCurrency(totalSalarySum)}
                          </td>
                          {totalPersonnelCosts.map((total, index) => (
                            <td key={index} className="p-3 text-center text-green-700 w-20">
                              {formatCurrency(total)}
                            </td>
                          ))}
                          <td className="p-3 text-center text-xs text-gray-500 w-32">
                            4ÎåÄ Î≥¥ÌóòÎ£å + Ìá¥ÏßÅÍ∏âÏó¨Ï∂©ÎãπÍ∏à + Ï†úÏàòÎãπ Ìè¨Ìï®
                          </td>
                        </tr>
                      </TabsContent>
                    </tbody>
                  </table>
                </div>
              </Tabs>
            </CardContent>
          </Card>

          {/* 4ÎåÄÎ≥¥Ìóò (ÌöåÏÇ¨Î∂ÄÎã¥Í∏à) */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="w-5 h-5" />
                4ÎåÄÎ≥¥Ìóò (ÌöåÏÇ¨Î∂ÄÎã¥Í∏à)
              </CardTitle>
              <CardDescription>Íµ≠ÎØºÏó∞Í∏à(4.5%) + Í±¥Í∞ïÎ≥¥Ìóò(3.5%) + Í≥†Ïö©Î≥¥Ìóò(1.5%) + ÏÇ∞Ïû¨Î≥¥Ìóò(1%) = Ï¥ù 10.5% Î∂ÄÎã¥</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b bg-yellow-50">
                      <th className="text-left p-3 font-semibold">Íµ¨Î∂Ñ</th>
                      <th className="text-center p-3 font-semibold">8Ïõî</th>
                      <th className="text-center p-3 font-semibold">9Ïõî</th>
                      <th className="text-center p-3 font-semibold">10Ïõî</th>
                      <th className="text-center p-3 font-semibold">11Ïõî</th>
                      <th className="text-center p-3 font-semibold">12Ïõî</th>
                      <th className="text-center p-3 font-semibold">1Ïõî</th>
                      <th className="text-center p-3 font-semibold">2Ïõî</th>
                      <th className="text-center p-3 font-semibold">3Ïõî</th>
                      <th className="text-center p-3 font-semibold">ÎπÑÍ≥†</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-b bg-yellow-50">
                      <td className="p-3 font-medium">4ÎåÄÎ≥¥Ìóò (ÌöåÏÇ¨Î∂ÄÎã¥Í∏à)</td>
                      {insuranceCosts.map((cost, index) => (
                        <td key={index} className="p-3 text-center">
                          {formatCurrency(cost)}
                        </td>
                      ))}
                      <td className="p-3 text-center text-xs text-gray-500">
                        Íµ≠ÎØºÏó∞Í∏à(4.5%) + Í±¥Í∞ïÎ≥¥Ìóò(3.5%) + Í≥†Ïö©Î≥¥Ìóò(1.5%) + ÏÇ∞Ïû¨Î≥¥Ìóò(1%) = Ï¥ù 10.5% Î∂ÄÎã¥
                      </td>
                    </tr>
                  </tbody>
                </table>
                    </div>
            </CardContent>
          </Card>

          {/* Í∞ÑÏ†ëÎπÑ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Building className="w-5 h-5" />
                Í∞ÑÏ†ëÎπÑ
              </CardTitle>
              <CardDescription>ÏßÄÍ∏âÏàòÏàòÎ£å, ÏûÑÏ∞®Î£å, ÏàòÎèÑÍ¥ëÏó¥ÎπÑ, Í∞êÍ∞ÄÏÉÅÍ∞Å Îì± Í∞ÑÏ†ëÎπÑÎ•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b bg-gray-50">
                      <th className="text-left p-3 font-semibold">Íµ¨Î∂Ñ</th>
                      <th className="text-center p-3 font-semibold">8Ïõî</th>
                      <th className="text-center p-3 font-semibold">9Ïõî</th>
                      <th className="text-center p-3 font-semibold">10Ïõî</th>
                      <th className="text-center p-3 font-semibold">11Ïõî</th>
                      <th className="text-center p-3 font-semibold">12Ïõî</th>
                      <th className="text-center p-3 font-semibold">1Ïõî</th>
                      <th className="text-center p-3 font-semibold">2Ïõî</th>
                      <th className="text-center p-3 font-semibold">3Ïõî</th>
                    </tr>
                  </thead>
                  <tbody>
                    {indirectCosts.map((cost, index) => (
                      <tr key={index} className="border-b hover:bg-gray-50">
                        <td className="p-3 font-medium">{cost.category}</td>
                        {cost.monthlyValues.map((value, monthIndex) => (
                          <td key={monthIndex} className="p-3 text-center">
                            {value === 'ÏûÖÎ†•' ? (
                              <span className="text-gray-400 italic">ÏûÖÎ†•</span>
                            ) : value === '-' ? (
                              <span className="text-gray-400">-</span>
                            ) : (
                              formatCurrency(value)
                            )}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>

        </TabsContent>

        {/* Ï°∞Îã¨ ÌÉ≠ */}
        <TabsContent value="procurement" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ShoppingCart className="w-5 h-5" />
                Ï°∞Îã¨ Ìï≠Î™© Í¥ÄÎ¶¨
              </CardTitle>
              <CardDescription>ÌîÑÎ°úÏ†ùÌä∏Ïóê ÌïÑÏöîÌïú Î¨ºÌíàÍ≥º ÏÑúÎπÑÏä§Ïùò Ï°∞Îã¨ÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-6 gap-4 p-3 bg-gray-50 rounded-lg font-medium text-sm">
                  <div>Ìï≠Î™©</div>
                  <div className="text-center">ÏàòÎüâ</div>
                  <div className="text-center">Îã®Í∞Ä</div>
                  <div className="text-center">Ï¥ùÏï°</div>
                  <div className="text-center">ÏÉÅÌÉú</div>
                  <div className="text-center">Ïï°ÏÖò</div>
                </div>
                
                {procurementItems.map((item, index) => (
                  <div key={index} className="grid grid-cols-6 gap-4 p-3 border-b border-gray-200 items-center">
                    <div className="font-medium">{item.item}</div>
                    <div className="text-center">{item.quantity}</div>
                    <div className="text-center">{formatCurrency(item.unitPrice)}</div>
                    <div className="text-center font-semibold text-red-600">
                      {formatCurrency(item.total)}
                    </div>
                    <div className="text-center">
                      <Badge className={getStatusColor(item.status)} variant="secondary">
                        {item.status}
                      </Badge>
                    </div>
                    <div className="text-center">
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>


      {/* Í≥µÏú† Î™®Îã¨ */}
      <CostManagementShareModal
        open={isShareModalOpen}
        onOpenChange={setIsShareModalOpen}
        projectId={activeProject.id}
        projectName={activeProject.name}
      />
    </div>
  )
}
